{{!-- Layouts --}}
{{!< default}}

{{#contentFor "M4_class_body"}}is-home{{/contentFor}}
<div id="twitch-container"></div>
<script>
const TWITCH_CHANNEL = 'mmmaxxx__';
const LOOKBACK_MS = 24 * 60 * 60 * 1000; // 24h
let twitchIframe = null, isStreamLive = false;

// Secure WS only
const WS_URL = 'wss://' + location.host + '/ws/twitch';

function showStream() {
  if (twitchIframe) return;
  const container = document.getElementById('twitch-container');
  if (!container) { console.warn('#twitch-container not found'); return; }
  const hostname = window.location.hostname;
  twitchIframe = document.createElement('iframe');
  twitchIframe.src = `https://player.twitch.tv/?channel=${TWITCH_CHANNEL}&parent=${hostname}&autoplay=true&muted=false`;
  twitchIframe.allowFullscreen = true;
  Object.assign(twitchIframe.style, {width:'100%',maxWidth:'1280px',height:'710px',border:'0',borderRadius:'12px'});
  container.appendChild(twitchIframe);
}

function parseTs(s) {
  if (!s) return null;
  const t = Date.parse(s);
  return Number.isFinite(t) ? t : null;
}

let ws, backoff = 1000;
function connectWS() {
  try {
    ws = new WebSocket(WS_URL);
    ws.onopen = () => { backoff = 1000; };
    ws.onmessage = (ev) => {
      try {
        const p = JSON.parse(ev.data); // expected: { live, started_at/last_live_at/updated_at }
        if (isStreamLive) return;
        const live = !!p.live;
        const lastLiveAt =
          parseTs(p.last_live_at || p.lastLiveAt || p.started_at || p.startedAt || p.updated_at || p.updatedAt);
        const within24h = lastLiveAt && (Date.now() - lastLiveAt <= LOOKBACK_MS);
        if (live || within24h) { isStreamLive = true; showStream(); }
      } catch {}
    };
    ws.onerror = () => { try { ws.close(); } catch {} };
    ws.onclose = () => { setTimeout(connectWS, backoff); backoff = Math.min(backoff * 2, 30000); };
  } catch { setTimeout(connectWS, backoff); backoff = Math.min(backoff * 2, 30000); }
}

if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', connectWS);
else connectWS();

// Optional responsive CSS
const style = document.createElement('style');
style.textContent = `
  #twitch-container{max-width:1280px;margin:20px auto;text-align:center}
  #twitch-container iframe{border:0}
  @media (max-width:900px){#twitch-container iframe{height:360px!important}}
  @media (max-width:600px){#twitch-container iframe{height:240px!important}}`;
document.head.appendChild(style);
</script>
<div class="h-cover home-banner mx-auto mb-10 p-2 grid gap-2 lg:grid-cols-5">
    {{#foreach posts visibility="all" from="1" to="3"}}
        {{!-- Home Top Section -> 3 first Articles - partials/story/story-cover.hbs --}}
        {{> "story/story-cover" }}
    {{/foreach}}
</div>

{{!-- Post Grid - 8 lates article --}}
<div class="container mx-auto mb-16">
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-4">

        {{!-- Story Grid - partiasl/story/story-grid.hbs --}}
        {{#foreach posts visibility="all" from="4" to="11"}}
            {{> "story/story-grid" classTitle='text-xl'}}
        {{/foreach}}

    </div>
</div>

{{!-- Post List - 4 latest articles --}}
<div class="container mx-auto my-10">
    <div class="flex flex-col flex-wrap lg:flex-row">
        <div class="flex-1">
            <div class="js-post-feed">
                {{!-- Story List - partials/story/story-list.hbs --}}
                {{#foreach posts visibility="all" from="12" to="16"}}
                    {{> "story/story-list"}}
                {{/foreach}}
            </div>

            {{pagination}}
        </div>

        {{!-- Sidebar - partials/sidebar.hbs --}}
        {{> "sidebar"}}
    </div>
</div>

{{/is}}