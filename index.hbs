{{!-- Layouts --}}
{{!< default}}

{{#contentFor "M4_class_body"}}is-home{{/contentFor}}
<div id="twitch-container"></div>

<script>
const TWITCH_CHANNEL = 'mmmaxxx__';
const CHECK_INTERVAL = 30000; // 30 seconds

let checkInterval = null;
let twitchIframe = null;
let isStreamLive = false; // Track stream status

// CORS proxies with fallback
const CORS_PROXIES = [
  'https://corsproxy.io/?',
  'https://cors.x2u.in/proxy?email=anonymous&apiKey=anonymous&url=',
  'https://api.codetabs.com/v1/proxy?quest='
];

async function checkStreamStatus() {
  // Stop checking if stream is already live
  if (isStreamLive) {
    console.log('üõë Stream already live, stopping further checks');
    if (checkInterval) {
      clearInterval(checkInterval);
      checkInterval = null;
    }
    return;
  }

  console.log(`üîç Checking stream status for ${TWITCH_CHANNEL}...`);
  
  for (let i = 0; i < CORS_PROXIES.length; i++) {
    try {
      const proxyUrl = CORS_PROXIES[i];
      const targetUrl = `https://twitchtracker.com/${TWITCH_CHANNEL}`;
      const requestUrl = proxyUrl + encodeURIComponent(targetUrl);
      
      console.log(`üì° Trying proxy ${i + 1}...`);
      
      const response = await fetch(requestUrl, {
        method: 'GET',
        headers: {
          'Accept': 'text/html',
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      const content = await response.text();
      
      // Check for live indicators in the HTML
      const isLive = content.includes('LIVE</span>') || 
                     content.includes('stream-status-live') || 
                     content.includes('Live for') ||
                     content.includes('broadcasting');
      
      if (isLive) {
        console.log(`‚úÖ ${TWITCH_CHANNEL} is LIVE! Creating iframe and stopping checks...`);
        showStream();
        
        // Mark as live and stop checking
        isStreamLive = true;
        if (checkInterval) {
          clearInterval(checkInterval);
          checkInterval = null;
          console.log('üéØ Monitoring stopped - stream is live. Iframe will persist until page reload.');
        }
      } else {
        console.log(`‚ùå ${TWITCH_CHANNEL} is offline. Will check again in ${CHECK_INTERVAL/1000} seconds...`);
      }
      
      return; // Success, exit loop
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è Proxy ${i + 1} failed: ${error.message}`);
      
      if (i === CORS_PROXIES.length - 1) {
        console.error('‚ùå All proxies failed, will retry in next interval');
      }
    }
  }
}

function showStream() {
  // Create iframe only if it doesn't exist
  if (!twitchIframe) {
    console.log('üé¨ Creating Twitch iframe...');
    
    const container = document.getElementById('twitch-container');
    
    // Create iframe element
    twitchIframe = document.createElement('iframe');
    twitchIframe.width = '1280';
    twitchIframe.height = '720';
    twitchIframe.frameBorder = '0';
    twitchIframe.scrolling = 'no';
    twitchIframe.allowFullscreen = true;
    
    // Set the src with proper parent domain
    const hostname = window.location.hostname;
    twitchIframe.src = `https://player.twitch.tv/?channel=${TWITCH_CHANNEL}&parent=${hostname}&autoplay=true&muted=false`;
    
    // Add responsive styling
    twitchIframe.style.width = '100%';
    twitchIframe.style.maxWidth = '1280px';
    twitchIframe.style.height = '720px';
    twitchIframe.style.borderRadius = '10px';
    
    // Append to container
    container.appendChild(twitchIframe);
    
    console.log(`üéÆ Iframe created and will persist until page reload`);
  }
}

// Start monitoring immediately
async function startMonitoring() {
  console.log('üöÄ Starting Twitch stream monitoring...');
  console.log(`‚è±Ô∏è Will check every ${CHECK_INTERVAL/1000} seconds until stream is found live`);
  
  // Immediate check
  await checkStreamStatus();
  
  // Set up interval only if stream is not live
  if (!isStreamLive) {
    checkInterval = setInterval(checkStreamStatus, CHECK_INTERVAL);
  }
}

// Initialize based on document state
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', startMonitoring);
} else {
  // Document already loaded, start immediately
  startMonitoring();
}

// Cleanup on page unload
window.addEventListener('beforeunload', () => {
  if (checkInterval) {
    clearInterval(checkInterval);
    console.log('üõë Page unloading - monitoring stopped');
  }
});

// Add responsive CSS
const style = document.createElement('style');
style.textContent = `
  #twitch-container {
    max-width: 1280px;
    margin: 20px auto;
    text-align: center;
  }
  
  #twitch-container iframe {
    border: 0px solid #000000;
  }
  
  @media (max-width: 900px) {
    #twitch-container iframe {
      height: 360px !important;
    }
  }
  
  @media (max-width: 600px) {
    #twitch-container iframe {
      height: 240px !important;
    }
  }
`;
document.head.appendChild(style);
</script>

{{#is "paged"}}
    {{!-- lates post - partials/loop.hbs --}}
    {{> "loop"}}
{{else}}

{{!-- Home Top Section --}}
<div class="h-cover home-banner mx-auto mb-10 p-2 grid gap-2 lg:grid-cols-5">
    {{#foreach posts visibility="all" from="1" to="3"}}
        {{!-- Home Top Section -> 3 first Articles - partials/story/story-cover.hbs --}}
        {{> "story/story-cover" }}
    {{/foreach}}
</div>

{{!-- Post Grid - 8 lates article --}}
<div class="container mx-auto mb-16">
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-4">

        {{!-- Story Grid - partiasl/story/story-grid.hbs --}}
        {{#foreach posts visibility="all" from="4" to="11"}}
            {{> "story/story-grid" classTitle='text-xl'}}
        {{/foreach}}

    </div>
</div>

{{!-- Post List - 4 latest articles --}}
<div class="container mx-auto my-10">
    <div class="flex flex-col flex-wrap lg:flex-row">
        <div class="flex-1">
            <div class="js-post-feed">
                {{!-- Story List - partials/story/story-list.hbs --}}
                {{#foreach posts visibility="all" from="12" to="16"}}
                    {{> "story/story-list"}}
                {{/foreach}}
            </div>

            {{pagination}}
        </div>

        {{!-- Sidebar - partials/sidebar.hbs --}}
        {{> "sidebar"}}
    </div>
</div>

{{/is}}