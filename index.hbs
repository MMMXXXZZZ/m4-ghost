{{!-- Layouts --}}
{{!< default}}

{{#contentFor "M4_class_body"}}is-home{{/contentFor}}
<div id="twitch-container">
  <div id="twitch-embed" style="display: none;">
    <iframe
      id="twitch-iframe"
      src=""
      height="480"
      width="854"
      allowfullscreen="true"
      scrolling="no"
      frameborder="0">
    </iframe>
  </div>
  <div id="offline-message">
    <p>Stream is currently offline. Checking for live status...</p>
  </div>
</div>

<script>
// Configuration
const TWITCH_CHANNEL = 'mmmaxxx__'; // Replace with your channel
const CHECK_INTERVAL = 30000; // Check every 45 seconds

let checkInterval = null;

// Check if channel is live using a proxy service
async function checkStreamStatus() {
  try {
    // Using a CORS proxy to check Twitch page content
    const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(`https://www.twitch.tv/${TWITCH_CHANNEL}`)}`;
    const response = await fetch(proxyUrl);
    const data = await response.json();
    
    // Check if the page content indicates a live stream
    if (data.contents.includes('isLiveBroadcast')) {
      showStream();
      console.log(`${TWITCH_CHANNEL} is live!`);
    } else {
      hideStream();
      console.log(`${TWITCH_CHANNEL} is offline`);
    }
  } catch (error) {
    console.error('Error checking stream status:', error);
    hideStream();
  }
}

// Same show/hide functions as Method 1
function showStream() {
  const twitchEmbed = document.getElementById('twitch-embed');
  const offlineMessage = document.getElementById('offline-message');
  const twitchIframe = document.getElementById('twitch-iframe');
  
  if (!twitchIframe.src) {
    twitchIframe.src = `https://player.twitch.tv/?channel=${TWITCH_CHANNEL}&parent=${window.location.hostname}&autoplay=true&muted=true`;
  }
  
  twitchEmbed.style.display = 'block';
  offlineMessage.style.display = 'none';
}

function hideStream() {
  const twitchEmbed = document.getElementById('twitch-embed');
  const offlineMessage = document.getElementById('offline-message');
  
  twitchEmbed.style.display = 'none';
  offlineMessage.style.display = 'block';
}

// Start monitoring
async function startMonitoring() {
  console.log('Starting Twitch stream monitoring...');
  await checkStreamStatus();
  checkInterval = setInterval(checkStreamStatus, CHECK_INTERVAL);
}

document.addEventListener('DOMContentLoaded', startMonitoring);

window.addEventListener('beforeunload', () => {
  if (checkInterval) {
    clearInterval(checkInterval);
  }
});
</script>

{{#is "paged"}}
    {{!-- lates post - partials/loop.hbs --}}
    {{> "loop"}}
{{else}}

{{!-- Home Top Section --}}
<div class="h-cover home-banner mx-auto mb-10 p-2 grid gap-2 lg:grid-cols-5">
    {{#foreach posts visibility="all" from="1" to="3"}}
        {{!-- Home Top Section -> 3 first Articles - partials/story/story-cover.hbs --}}
        {{> "story/story-cover" }}
    {{/foreach}}
</div>

{{!-- Post Grid - 8 lates article --}}
<div class="container mx-auto mb-16">
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-4">

        {{!-- Story Grid - partiasl/story/story-grid.hbs --}}
        {{#foreach posts visibility="all" from="4" to="11"}}
            {{> "story/story-grid" classTitle='text-xl'}}
        {{/foreach}}

    </div>
</div>

{{!-- Post List - 4 latest articles --}}
<div class="container mx-auto my-10">
    <div class="flex flex-col flex-wrap lg:flex-row">
        <div class="flex-1">
            <div class="js-post-feed">
                {{!-- Story List - partials/story/story-list.hbs --}}
                {{#foreach posts visibility="all" from="12" to="16"}}
                    {{> "story/story-list"}}
                {{/foreach}}
            </div>

            {{pagination}}
        </div>

        {{!-- Sidebar - partials/sidebar.hbs --}}
        {{> "sidebar"}}
    </div>
</div>

{{/is}}