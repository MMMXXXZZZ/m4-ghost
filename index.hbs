{{!-- Layouts --}}
{{!< default}}

{{#contentFor "M4_class_body"}}is-home{{/contentFor}}
<div id="twitch-container">
  <div id="twitch-embed" style="display: none;">
    <iframe
      id="twitch-iframe"
      src=""
      height="480"
      width="854"
      allowfullscreen="true"
      scrolling="no"
      frameborder="0">
    </iframe>
  </div>
  <div id="offline-message">
    <p>Checking stream status...</p>
  </div>
</div>

<script>
const TWITCH_CHANNEL = 'mmmaxxx__'; // Your channel name
const CHECK_INTERVAL = 30000; // Check every 30 seconds

let checkInterval = null;
let currentProxyIndex = 0;

// List of CORS proxies to try (in order of reliability)
const CORS_PROXIES = [
  'https://cors.x2u.in/proxy?email=anonymous&apiKey=anonymous&url=',
  'https://codetabs.com/v1/proxy?quest=',
  'https://cors-anywhere.herokuapp.com/',
  'https://api.allorigins.win/get?url='
];

// Check stream status using multiple proxy fallbacks
async function checkStreamStatus() {
  console.log(`Checking stream status for ${TWITCH_CHANNEL}...`);
  
  for (let i = 0; i < CORS_PROXIES.length; i++) {
    try {
      const proxyUrl = CORS_PROXIES[i];
      const targetUrl = `https://twitchtracker.com/${TWITCH_CHANNEL}`;
      const requestUrl = proxyUrl + encodeURIComponent(targetUrl);
      
      console.log(`Trying proxy ${i + 1}: ${proxyUrl}`);
      
      const response = await fetch(requestUrl, {
        method: 'GET',
        headers: {
          'Accept': 'text/html,application/json',
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      let content;
      if (proxyUrl.includes('allorigins')) {
        const data = await response.json();
        content = data.contents;
      } else if (proxyUrl.includes('codetabs')) {
        content = await response.text();
      } else {
        content = await response.text();
      }
      
      // Check for live indicators
      const isLive = content.includes('LIVE</span>') || 
                     content.includes('isLiveBroadcast') || 
                     content.includes('stream-status-live') ||
                     content.includes('"live":true');
      
      if (isLive) {
        showStream();
        console.log(`‚úÖ ${TWITCH_CHANNEL} is LIVE!`);
      } else {
        hideStream();
        console.log(`‚ùå ${TWITCH_CHANNEL} is offline`);
      }
      
      return; // Success, exit the loop
      
    } catch (error) {
      console.warn(`Proxy ${i + 1} failed:`, error.message);
      
      if (i === CORS_PROXIES.length - 1) {
        // All proxies failed
        console.error('All proxy methods failed, assuming offline');
        hideStream();
      }
    }
  }
}

function showStream() {
  const twitchEmbed = document.getElementById('twitch-embed');
  const offlineMessage = document.getElementById('offline-message');
  const twitchIframe = document.getElementById('twitch-iframe');
  
  if (!twitchIframe.src || twitchIframe.src === '') {
    twitchIframe.src = `https://player.twitch.tv/?channel=${TWITCH_CHANNEL}&parent=${window.location.hostname}&autoplay=false&muted=true`;
  }
  
  twitchEmbed.style.display = 'block';
  offlineMessage.style.display = 'none';
}

function hideStream() {
  const twitchEmbed = document.getElementById('twitch-embed');
  const offlineMessage = document.getElementById('offline-message');
  
  twitchEmbed.style.display = 'none';
  offlineMessage.style.display = 'block';
  offlineMessage.innerHTML = '<p>Stream is currently offline. Next check in 30 seconds...</p>';
}

// Start monitoring immediately and then set interval
async function startMonitoring() {
  console.log('üöÄ Starting Twitch stream monitoring...');
  
  // IMMEDIATE check on page load
  await checkStreamStatus();
  
  // Set up interval for continuous checking
  checkInterval = setInterval(checkStreamStatus, CHECK_INTERVAL);
  console.log(`‚è±Ô∏è Set up checking every ${CHECK_INTERVAL/1000} seconds`);
}

// Initialize immediately when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', startMonitoring);
} else {
  // Document already loaded
  startMonitoring();
}

// Clean up on page unload
window.addEventListener('beforeunload', () => {
  if (checkInterval) {
    clearInterval(checkInterval);
  }
});
</script>

<style>
#twitch-container {
  max-width: 854px;
  margin: 20px auto;
  text-align: center;
}

#offline-message {
  padding: 40px 20px;
  background: linear-gradient(135deg, #9146ff, #6441a4);
  color: white;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 500;
}

#twitch-iframe {
  width: 100%;
  max-width: 854px;
  height: 480px;
  border-radius: 8px;
  border: 3px solid #9146ff;
}

@media (max-width: 900px) {
  #twitch-iframe {
    height: 360px;
  }
}

@media (max-width: 600px) {
  #twitch-iframe {
    height: 240px;
  }
}
</style>

{{#is "paged"}}
    {{!-- lates post - partials/loop.hbs --}}
    {{> "loop"}}
{{else}}

{{!-- Home Top Section --}}
<div class="h-cover home-banner mx-auto mb-10 p-2 grid gap-2 lg:grid-cols-5">
    {{#foreach posts visibility="all" from="1" to="3"}}
        {{!-- Home Top Section -> 3 first Articles - partials/story/story-cover.hbs --}}
        {{> "story/story-cover" }}
    {{/foreach}}
</div>

{{!-- Post Grid - 8 lates article --}}
<div class="container mx-auto mb-16">
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-4">

        {{!-- Story Grid - partiasl/story/story-grid.hbs --}}
        {{#foreach posts visibility="all" from="4" to="11"}}
            {{> "story/story-grid" classTitle='text-xl'}}
        {{/foreach}}

    </div>
</div>

{{!-- Post List - 4 latest articles --}}
<div class="container mx-auto my-10">
    <div class="flex flex-col flex-wrap lg:flex-row">
        <div class="flex-1">
            <div class="js-post-feed">
                {{!-- Story List - partials/story/story-list.hbs --}}
                {{#foreach posts visibility="all" from="12" to="16"}}
                    {{> "story/story-list"}}
                {{/foreach}}
            </div>

            {{pagination}}
        </div>

        {{!-- Sidebar - partials/sidebar.hbs --}}
        {{> "sidebar"}}
    </div>
</div>

{{/is}}